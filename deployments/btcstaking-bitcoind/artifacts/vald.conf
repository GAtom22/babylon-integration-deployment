[Application Options]
; Logging level for all subsystems {trace, debug, info, warn, error, fatal}
DebugLevel = debug

; the name of the consumer chain
ChainName = babylon

; The base directory that contains validator's data, logs, configuration file, etc.
ValdDir = /home/btcvalidator/.vald

; Path to configuration file
ConfigFile = /home/btcvalidator/.vald/vald.conf

; The directory to store validator's data within
DataDir = /home/btcvalidator/.vald/data

; Directory to log output.
LogDir = /home/btcvalidator/.vald/logs

; If config file does not exist, create it with current settings
DumpCfg = false

; The number of Schnorr public randomness for each commitment
NumPubRand = 100

; The upper bound of the number of Schnorr public randomness for each commitment
NumPubRandMax = 1000

; The minimum gap between the last committed rand height and the current Babylon block height
MinRandHeightGap = 10

; The interval between each attempt to commit public randomness
RandomnessCommitInterval = 5s

; The interval between each attempt to submit finality signature or public randomness after a failure
SubmissionRetryInterval = 3s

; The interval between each attempt to check and submit unbonding signature
UnbondingSigSubmissionInterval = 20s

; The maximum number of retries to submit finality signature or public randomness
MaxSubmissionRetries = 20

; The interval between each try of fast sync, which is disabled if the value is 0
FastSyncInterval = 20s

; The maximum number of blocks to catch up for each fast sync
FastSyncLimit = 10

; The block gap that will trigger the fast sync
FastSyncGap = 6

; Bitcoin network to run on
BitcoinNetwork = regtest

; If the program is running in Jury mode
JuryMode = false

; Add an interface/port/socket to listen for RPC connections
RawRPCListeners = 127.0.0.1:15812

[chainpollerconfig]
; The maximum number of Babylon blocks that can be stored in the buffer
BufferSize = 1000

; The interval between each polling of Babylon blocks
PollInterval = 5s

[databaseconfig]
; Possible database to choose as backend
Backend = bbolt

; The path that stores the database file
Path = bbolt.db

; The name of the database
Name = default

[babylon]
; name of the key to sign transactions with
Key = btc-validator

; chain id of the chain to connect to
ChainID = chain-test

; address of the rpc server to connect to
RPCAddr = http://babylondnode0:26657

; address of the grpc server to connect to
GRPCAddr = https://babylondnode0:9090

; account prefix to use for addresses
AccountPrefix = bbn

; type of keyring to use
KeyringBackend = test

; adjustment factor when using gas estimation
GasAdjustment = 1.5

; comma separated minimum gas prices to accept for transactions
GasPrices = 0.01ubbn

; directory to store keys in
KeyDirectory = /home/btcvalidator/.vald

; flag to print debug output
Debug = true

; client timeout when doing queries
Timeout = 20s

; block timeout when waiting for block events
BlockTimeout = 1m0s

; default output when printint responses
OutputFormat = json

; sign mode to use
SignModeStr = direct

[jury]
; The key name of the Jury if the program is running in Jury mode
JuryKeyName = jury-key

; The interval between each query for pending BTC delegations
QueryInterval = 10s

[validator]
; The static height from which we start polling the chain
StaticChainScanningStartHeight = 1

; Automatically discover the height from which to start polling the chain
AutoChainScanningMode = true
